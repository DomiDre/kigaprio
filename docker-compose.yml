services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: kigaprio-backend
    restart: unless-stopped
    volumes:
      - frontend-static:/app/static:ro
    environment:
      - ENV=production
      - DEBUG=false
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kigaprio-backend.rule=Host(`kiga.dhjd.de`)"
      - "traefik.http.routers.kigaprio-backend.entrypoints=websecure"
      - "traefik.http.routers.kigaprio-backend.tls=true"
      - "traefik.http.routers.kigaprio-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.kigaprio-backend.loadbalancer.server.port=8000"
      # Rate limiting
      - "traefik.http.middlewares.kigaprio-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.kigaprio-ratelimit.ratelimit.burst=50"
      - "traefik.http.routers.kigaprio-backend.middlewares=kigaprio-ratelimit"
    depends_on:
      # - db
      # - redis
      frontend-builder:
        condition: service_completed_successfully
    networks:
      - kigaprio-prod
      # - proxy
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Build frontend and copy static files
  frontend-builder:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
    image: kigaprio-frontend-builder
    restart: "no"
    volumes:
      - frontend-static:/shared/build
    command: sh -c "cp -r /app/build/* /shared/build/"
    networks:
      - kigaprio-prod

  # db:
  #   image: postgres:16-alpine
  #   container_name: kigaprio-db
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_USER=${DB_USER}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #     - POSTGRES_DB=${DB_NAME}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #     - ./backup:/backup  # For database backups
  #   networks:
  #     - kigaprio-prod
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #
  # redis:
  #   image: redis:7-alpine
  #   container_name: kigaprio-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - kigaprio-prod
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5


volumes:
  # postgres-data:
  # redis-data:
  frontend-static:

networks:
  kigaprio-prod:
    driver: bridge
  # proxy:
  #   external: true
